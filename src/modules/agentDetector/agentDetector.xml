<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>

  <name>agentDetector</name>
  <doxygen-group>icubhri_modules</doxygen-group>
  <description>%Module based on kinectClient "Kinect Wrapper Client" that track and recognize people.</description>
  <copypolicy>Released under the terms of the GNU GPL v2.0</copypolicy>
  <version>1.0</version>

  <description-long>
    Module based on kinectClient "Kinect Wrapper Client" that tracks people.
    This module receives information from the <a href="https://github.com/robotology/kinect-wrapper">Kinect Wrapper</a>, and convert joints to the iCub referential.
    It requires the kinectServer, OPC and RFH running.
  </description-long>

  <arguments>
    <param default="agentDetector" desc="To specify the module's name; all the open ports will be tagged with the prefix /name">name</param>
    <param default="agentDetector.ini" desc="To specify the configuration file">from</param>
    <param default="visualSystem" desc="To specify the default context where config files are loader">context</param>
    <param default="0.03" desc="period of acquisition in seconds">period</param>
    <param default="OPC" desc="To specify the specifies the opc database name, where data are readed">opc</param>
    <param default="true" desc="to have GUI with depth, images, joints, ...">showImages</param>
    <param default="rgb+depth+skeleton+players" desc="to select which images to show, as a sum of available types: rgb, depth, skeleton, players">showMode</param>
    <param default="10" desc="x position of the images as a group">x</param>
    <param default="10" desc="y position of the images as a group">y</param>
    <param desc="x position of the rgb image">x-rgb</param>
    <param desc="y position of the rgb image">y-rgb</param>
    <param desc="x position of the depth image">x-depth</param>
    <param desc="y position of the depth image">y-depth</param>
    <param desc="x position of the skeleton image">x-skeleton</param>
    <param desc="y position of the skeleton image">y-skeleton</param>
    <param desc="x position of the players image">x-players</param>
    <param desc="y position of the players image">y-players</param>
  </arguments>

  <authors>
    <author email="stephane.lallee@gmail.com"> Stéphane Lallée </author>
  </authors>

  <data>
    <input>
        <type>Bottle</type>
        <port carrier="tcp">/agentDetector/rpc</port>
        <required>yes</required>
        <priority>no</priority>
        <description>Response port. Supported commands:
                        - change_partner_name NAME_STRING: change the name of partner
                        - pause: lock with mutex
                        - resume: unlock the mutex
        </description>
    </input>

    <output>
        <type>yarp::sig::Bottle</type>
        <port carrier="tcp">/agentDetector/skeleton:o</port>
        <required>no</required>
        <priority>no</priority>
        <description>
            buffered port streaming out skeleton properties
        </description>
    </output>
    <output>
        <type>yarp::sig::ImageOf</type>
        <port carrier="udp">/agentDetector/kinect/depthPort:o</port>
        <required>no</required>
        <priority>no</priority>
        <description>
            buffered port streaming out depth images
        </description>
    </output>
    <output>
        <type>yarp::sig::ImageOf</type>
        <port carrier="udp">/agentDetector/kinect/imagePort:o</port>
        <required>no</required>
        <priority>no</priority>
        <description>
            buffered port streaming out images
        </description>
    </output>
    <output>
        <type>yarp::sig::ImageOf</type>
        <port carrier="udp">/agentDetector/kinect/playerPort:o</port>
        <required>no</required>
        <priority>no</priority>
        <description>
            buffered port streaming out partner images
        </description>
    </output>
    <output>
        <type>yarp::sig::ImageOf</type>
        <port carrier="udp">/agentDetector/kinect/skeletonPort:o</port>
        <required>no</required>
        <priority>no</priority>
        <description>
            buffered port streaming out skeleton images
        </description>
    </output>
    <output>
        <type>yarp::sig::Bottle</type>
        <port carrier="tcp">/agentDetector/kinect/agentLoc:o</port>
        <required>no</required>
        <priority>no</priority>
        <description>
            buffered port streaming out agent location
        </description>
    </output>
    <output>
        <type>rpc</type>
        <port carrier="tcp">/agentDetector/rfh:o</port>
        <required>no</required>
        <priority>no</priority>
        <description>
            port to communicate with referenceFrameHandler rpc server
        </description>
    </output>


  </data>
</module>

